# -*- coding: utf-8 -*-
"""test_apple_maturity_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AW9wM2702XsLBN4w5FIv-WKn0BI1g8KG
"""

from google.colab import drive
drive.mount('/content/drive')

data_path = "/content/drive/MyDrive/apple_dataset"

train_dir = "/content/drive/MyDrive/apple_dataset/train"
val_dir = "/content/drive/MyDrive/apple_dataset/val"
test_dir = "/content/drive/MyDrive/apple_dataset/test"

"""# **Directory Creation**"""

import os
import shutil

for directory in [val_dir]:
    for subdirectory in ["ripe", "overripe", "unripe"]:
        subdir_path = os.path.join(directory, subdirectory)
        if not os.path.exists(subdir_path):
            os.makedirs(subdir_path)

num_validation_images = 50

for subdirectory in ["ripe", "overripe", "unripe"]:
    src_dir = os.path.join(train_dir, subdirectory)
    val_subdir_path = os.path.join(val_dir, subdirectory)
    for i, filename in enumerate(os.listdir(src_dir)):
        if i < num_validation_images:
            src_path = os.path.join(src_dir, filename)
            dst_path = os.path.join(val_subdir_path, filename)
            shutil.move(src_path, dst_path)

"""# **Importing Libraries**"""

import cv2
import os
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import to_categorical

ripe_img_dir = "/content/drive/MyDrive/apple_dataset/train/ripe/"
overripe_img_dir = "/content/drive/MyDrive/apple_dataset/train/overripe/"
unripe_img_dir = "/content/drive/MyDrive/apple_dataset/train/unripe/"
label_map = {"ripe": 0, "overripe": 1, "unripe": 2}

"""# **Ripe Images Loading**"""

def load_images(ripe_img_dir):
    ripe_images = []
    ripe_labels = []
    for subdir, dirs, files in os.walk(ripe_img_dir):
        for file in files:
            img_path = os.path.join(subdir, file)
            if img_path.endswith(".jpg") or img_path.endswith(".png"):
                label = img_path.split("/")[-2]
                label = label_map[label]  
                img = cv2.imread(img_path)
                img = cv2.resize(img, (224, 224))
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                ripe_images.append(img)
                ripe_labels.append(int(label))
    return np.array(ripe_images), np.array(ripe_labels)

ripe_images, ripe_labels = load_images(ripe_img_dir)

np.savez("ripe_preprocessed_images.npz", images=ripe_images, labels=ripe_labels)

data = np.load("ripe_preprocessed_images.npz")
images = data["images"]
labels = data["labels"]

"""# **Overripe Images Loading**"""

def load_images(overripe_img_dir):
    overripe_images = []
    overripe_labels = []
    for subdir, dirs, files in os.walk(overripe_img_dir):
        for file in files:
            img_path = os.path.join(subdir, file)
            if img_path.endswith(".jpg") or img_path.endswith(".png"):
                label = img_path.split("/")[-2]
                label = label_map[label]  
                img = cv2.imread(img_path)
                img = cv2.resize(img, (224, 224))
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                overripe_images.append(img)
                overripe_labels.append(int(label))
    return np.array(overripe_images), np.array(overripe_labels)

overripe_images, overripe_labels = load_images(overripe_img_dir)

np.savez("overripe_preprocessed_images.npz", images=overripe_images, labels=overripe_labels)

data = np.load("overripe_preprocessed_images.npz")
images = data["images"]
labels = data["labels"]

"""# **Unripe Image Loading**"""

def load_images(unripe_img_dir):
    unripe_images = []
    unripe_labels = []
    for subdir, dirs, files in os.walk(unripe_img_dir):
        for file in files:
            img_path = os.path.join(subdir, file)
            if img_path.endswith(".jpg") or img_path.endswith(".png"):
                label = img_path.split("/")[-2]
                label = label_map[label]  
                img = cv2.imread(img_path)
                img = cv2.resize(img, (224, 224))
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                unripe_images.append(img)
                unripe_labels.append(int(label))
    return np.array(unripe_images), np.array(unripe_labels)

unripe_images, unripe_labels = load_images(unripe_img_dir)

np.savez("unripe_preprocessed_images.npz", images=unripe_images, labels=unripe_labels)

data = np.load("unripe_preprocessed_images.npz")
images = data["images"]
labels = data["labels"]

"""# **Training and Testing**"""

images = ripe_images + overripe_images + unripe_images
labels = ripe_labels + overripe_labels + unripe_labels

labels = labels.astype('int')

np.save('images.npy', images)
np.save('labels.npy', labels)

images = np.load('/content/drive/MyDrive/apple_dataset/images.npy')
labels = np.load('/content/drive/MyDrive/apple_dataset/labels.npy')

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

"""# **Data Augmentation**

**Data Generator for Train ,Test and Validation**
"""

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=45,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    fill_mode='nearest')

valid_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

"""**Train Generator**"""

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224,224),
    batch_size=32,
    class_mode='categorical')

"""**Val Generator**"""

val_generator = valid_datagen.flow_from_directory(
    val_dir,
    target_size=(224,224),
    batch_size=32,
    class_mode='categorical')

"""**Test Generator**"""

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224,224),
    batch_size=32,
    class_mode='categorical')

"""# **CNN Model**"""

